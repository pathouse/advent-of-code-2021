(defun aoc-string-to-char-vec (str)
  (seq-into (seq-filter (lambda (s) (not (equal s ""))) (split-string str "")) 'vector))

(defun aoc-parse-rule (line)
  (seq-into (split-string line " -> ") 'vector))

(defun aoc-add-rule (rule rules)
  (puthash (aoc-string-to-char-vec (aref rule 0))
           (list 'insert (aref rule 1) 'count 0)
           rules))

(defun aoc-parse-input ()
  (beginning-of-buffer)
  (let ((template '())
        (rules (make-hash-table :test 'equal))
        (chars '()))
    (setq template
          (aoc-string-to-char-vec (replace-regexp-in-string "\n" "" (thing-at-point 'line nil))))
    (forward-line 2)
    (while (not (eobp))
      (let ((rule (aoc-parse-rule (replace-regexp-in-string "\n" "" (thing-at-point 'line nil)))))
        (aoc-add-rule rule rules)
        (setq chars (cons (aref rule 1) chars)))
      (forward-line 1))
    (list 'template template 'rules rules 'chars (seq-into (seq-sort 'string< (seq-uniq chars)) 'vector))))

(defun aoc-inc-count (counts item items &optional n)
  (let ((idx (seq-position items item))
        (num (or n 1)))
    (aset counts idx (+ num (aref counts idx)))))

(defun aoc-init-counts (counts polymer chars)
  (seq-do
   (lambda (elt)
     (aoc-inc-count counts elt chars))
   polymer))

(defun aoc-init-pair-counts (polymer rules)
  (seq-do-indexed
   (lambda (elt idx)
     (if (< idx (- (length polymer) 1))
         (let* ((pair (vector elt (aref polymer (+ 1 idx))))
                (pair-info (gethash pair rules)))
           (plist-put pair-info 'count (+ 1 (plist-get pair-info 'count))))))
   polymer))

(defun aoc-run-iteration (rules chars char-counts)
  (let ((inc-pairs '())
        (dec-pairs '()))
    (maphash
     (lambda (pair pair-info)
       (if (> (plist-get pair-info 'count) 0)
           (let* ((count (plist-get pair-info 'count))
                  (new-char (plist-get pair-info 'insert))
                  (new-pair-one (vector (aref pair 0) new-char))
                  (new-pair-two (vector new-char (aref pair 1))))
             (setq inc-pairs (cons (vector new-pair-one count) inc-pairs))
             (setq inc-pairs (cons (vector new-pair-two count) inc-pairs))
             (setq dec-pairs (cons (vector pair count) dec-pairs))
             (aoc-inc-count char-counts new-char chars count))))
     rules)
    (seq-do
     (lambda (p)
       (let* ((pair (aref p 0))
             (count (aref p 1))
             (pair-info (gethash pair rules)))
         (plist-put pair-info 'count (+ count (plist-get pair-info 'count)))))
     inc-pairs)
    (seq-do
     (lambda (p)
       (let* ((pair (aref p 0))
             (count (aref p 1))
             (pair-info (gethash pair rules)))
         (plist-put pair-info 'count (- (plist-get pair-info 'count) count))))
     dec-pairs)))

(defun aoc-fourteen-two ()
  (interactive)
  (let* ((parsed-input (aoc-parse-input))
         (polymer (plist-get parsed-input 'template))
         (rules (plist-get parsed-input 'rules))
         (chars (plist-get parsed-input 'chars))
         (counts (make-vector (length chars) 0)))
    (aoc-init-counts counts polymer chars)
    (aoc-init-pair-counts polymer rules)
    (dotimes (_n 40) (aoc-run-iteration rules chars counts))
    (message "answer: %d" (- (seq-max counts) (seq-min counts)))))
