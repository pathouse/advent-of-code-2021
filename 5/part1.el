(defun aoc-parse-line-segments ()
  (beginning-of-buffer)
  (let ((segments '()))
    (while (not (eobp))
      (let ((current-seg (thing-at-point 'line nil)))
        (setq segments (cons (aoc-parse-line-segment current-seg) segments)))
      (forward-line 1))
    segments))

(defun aoc-parse-line-segment (str)
  (mapcar (lambda (p) (mapcar 'string-to-number (split-string p ","))) (split-string str " -> ")))

(defun aoc-segment-xs (segment)
  (list (nth 0 (nth 0 segment))
        (nth 0 (nth 1 segment))))

(defun aoc-segment-ys (segment)
  (list (nth 1 (nth 0 segment))
        (nth 1 (nth 1 segment))))

(defun aoc-segment-min-x (segment)
  (seq-min (aoc-segment-xs segment)))

(defun aoc-segment-max-x (segment)
  (seq-max (aoc-segment-xs segment)))

(defun aoc-segment-min-y (segment)
  (seq-min (aoc-segment-ys segment)))

(defun aoc-segment-max-y (segment)
  (seq-max (aoc-segment-ys segment)))

(defun aoc-segment-horizontalp (segment)
  (eq (length (seq-uniq (aoc-segment-ys segment))) 1))

(defun aoc-segment-verticalp (segment)
  (eq (length (seq-uniq (aoc-segment-xs segment))) 1))

(defun aoc-straight-linep (segment)
  (or (aoc-segment-horizontalp segment)
      (aoc-segment-verticalp segment)))

(defun aoc-horizontal-overlap (segment-a segment-b)
  (if (eq (aoc-segment-min-y segment-a) (aoc-segment-min-y segment-b))
      (let ((a-min-x (aoc-segment-min-x segment-a))
            (a-max-x (aoc-segment-max-x segment-a))
            (b-min-x (aoc-segment-min-x segment-b))
            (b-max-x (aoc-segment-max-x segment-b)))
        (if (and (<= a-min-x b-max-x)
                 (<= b-min-x a-max-x))
            (mapcar
             (lambda (n) (list n (aoc-segment-min-y segment-a)))
             (number-sequence (seq-max (list a-min-x b-min-x)) (seq-min (list a-max-x b-max-x))))
          '()))
    '()))

(defun aoc-vertical-overlap (segment-a segment-b)
  (if (eq (aoc-segment-min-x segment-a) (aoc-segment-min-x segment-b))
      (let ((a-min-y (aoc-segment-min-y segment-a))
            (a-max-y (aoc-segment-max-y segment-a))
            (b-min-y (aoc-segment-min-y segment-b))
            (b-max-y (aoc-segment-max-y segment-b)))
        (if (and (<= a-min-y b-max-y)
                 (<= b-min-y a-max-y))
            (mapcar
             (lambda (n) (list (aoc-segment-min-x segment-a) n))
             (number-sequence (seq-max (list a-min-y b-min-y)) (seq-min (list a-max-y b-max-y))))
          '()))
    '()))

(defun aoc-inside-segment-x (n segment)
  (and (>= n (aoc-segment-min-x segment))
       (<= n (aoc-segment-max-x segment))))

(defun aoc-inside-segment-y (n segment)
  (and (>= n (aoc-segment-min-y segment))
       (<= n (aoc-segment-max-y segment))))

(defun aoc-perpendicular-intersect (segment-a segment-b)
  (cond ((and (aoc-segment-horizontalp segment-a)
               (aoc-inside-segment-x (aoc-segment-min-x segment-b) segment-a)
               (aoc-inside-segment-y (aoc-segment-min-y segment-a) segment-b))
         (list (list (aoc-segment-min-x segment-b) (aoc-segment-min-y segment-a))))
        ((and (aoc-segment-verticalp segment-a)
               (aoc-inside-segment-x (aoc-segment-min-x segment-a) segment-b)
               (aoc-inside-segment-y (aoc-segment-min-y segment-b) segment-a))
         (list (list (aoc-segment-min-x segment-a) (aoc-segment-min-y segment-b))))
       (t '())))


(defun aoc-diagonal-points (segment)
  (let ((point-a (car segment))
        (point-b (car (cdr segment))))
    (let ((x-range (if (> (nth 0 point-a) (nth 0 point-b))
                       (seq-reverse (number-sequence (nth 0 point-b) (nth 0 point-a)))
                     (number-sequence (nth 0 point-a) (nth 0 point-b))))
          (y-range (if (> (nth 1 point-a) (nth 1 point-b))
                       (seq-reverse (number-sequence (nth 1 point-b) (nth 1 point-a)))
                     (number-sequence (nth 1 point-a) (nth 1 point-b)))))
      (mapcar (lambda (n) (list (car n) (cdr n))) (mapcar* #'cons x-range y-range)))))

(defun aoc-diagonal-intersect (segment-a segment-b)
  (cond ((or (aoc-segment-horizontalp segment-a)
             (aoc-segment-verticalp segment-a))
         (seq-filter (lambda (p) (and (aoc-inside-segment-x (nth 0 p) segment-a)
                                      (aoc-inside-segment-y (nth 1 p) segment-a)))
                     (aoc-diagonal-points segment-b)))
        ((or (aoc-segment-horizontalp segment-b)
             (aoc-segment-verticalp segment-b))
         (seq-filter (lambda (p) (and (aoc-inside-segment-x (nth 0 p) segment-b)
                                      (aoc-inside-segment-y (nth 1 p) segment-b)))
                     (aoc-diagonal-points segment-a)))
        (t (seq-intersection (aoc-diagonal-points segment-a) (aoc-diagonal-points segment-b)))))

(defun aoc-segment-shared-points (segment-a segment-b)
  (cond ((and (aoc-segment-horizontalp segment-a) (aoc-segment-horizontalp segment-b))
         (aoc-horizontal-overlap segment-a segment-b))
        ((and (aoc-segment-verticalp segment-a) (aoc-segment-verticalp segment-b))
         (aoc-vertical-overlap segment-a segment-b))
        ((or (and (aoc-segment-horizontalp segment-a) (aoc-segment-verticalp segment-b))
             (and (aoc-segment-horizontalp segment-b) (aoc-segment-verticalp segment-a)))
         (aoc-perpendicular-intersect segment-a segment-b))
        (t (aoc-diagonal-intersect segment-a segment-b))))

(defun aoc-collect-shared-points (segments points)
  (if (eq (car segments) nil)
      (seq-uniq points)
    (aoc-collect-shared-points
     (cdr segments)
     (append points (mapcan (apply-partially 'aoc-segment-shared-points (car segments)) (cdr segments))))))

(defun aoc-hydrothermal-vents-count ()
  (interactive)
  (let ((segments (aoc-parse-line-segments))
        (buf (get-buffer-create "hydrothermal-vents")))
    (select-window (split-window-vertically))
    (switch-to-buffer buf)
    (erase-buffer)
    (insert (format "%d" (length (aoc-collect-shared-points segments '()))))))
