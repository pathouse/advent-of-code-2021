(defconst aoc-hex-to-bin
  (let ((map (make-hash-table :test 'equal)))
    (puthash ?0 "0000" map)
    (puthash ?1 "0001" map)
    (puthash ?2 "0010" map)
    (puthash ?3 "0011" map)
    (puthash ?4 "0100" map)
    (puthash ?5 "0101" map)
    (puthash ?6 "0110" map)
    (puthash ?7 "0111" map)
    (puthash ?8 "1000" map)
    (puthash ?9 "1001" map)
    (puthash ?A "1010" map)
    (puthash ?B "1011" map)
    (puthash ?C "1100" map)
    (puthash ?D "1101" map)
    (puthash ?E "1110" map)
    (puthash ?F "1111" map)
    map))

(defun aoc-get-bin (hex)
  (gethash hex aoc-hex-to-bin))

(defun aoc-literalp (type-id)
  (eq type-id 4))

(defun aoc-parse-packet (str)
  (let* ((header (seq-take str 6))
         (version (string-to-number (seq-take header 3) 2))
         (type-id (string-to-number (seq-drop header 3) 2))
         (contents (seq-drop str 6))
         (result (list 'version version 'type-id type-id)))
    (if (aoc-literalp type-id)
        (append result (aoc-parse-literal contents))
      (append result (aoc-parse-operator contents)))))

(defun aoc-parse-literal (packet)
  (let ((contents packet)
        (bits "")
        (end-of-packet nil))
    (while (not end-of-packet)
      (let* ((next-bits (seq-take contents 5))
             (leading (seq-take next-bits 1))
             (trailing (seq-drop next-bits 1)))
        (setq contents (seq-drop contents 5))
        (if (equal leading "0")
            (setq end-of-packet t))
        (setq bits (concatenate 'string bits trailing))))
    (list 'value (string-to-number bits 2) 'leftover contents)))

(defun aoc-parse-operator-by-length (body)
  (let* ((length-in-bits (string-to-number (seq-take body 15) 2))
        (str (seq-take (seq-drop body 15) length-in-bits))
        (packets '()))
    (while (>= (length str) 11)
      (let ((next-packet (aoc-parse-packet str)))
        (setq packets (cons next-packet packets))
        (setq str (plist-get next-packet 'leftover))))
    (list 'subpackets (seq-reverse packets) 'leftover (seq-drop body (+ 15 length-in-bits)))))

(defun aoc-parse-operator-by-count (body)
  (let ((sub-packet-count (string-to-number (seq-take body 11) 2))
        (str (seq-drop body 11))
        (packets '()))
    (while (< (length packets) sub-packet-count)
      (let ((next-packet (aoc-parse-packet str)))
        (setq packets (cons next-packet packets))
        (setq str (plist-get next-packet 'leftover))))
    (list 'subpackets (seq-reverse packets) 'leftover str)))

(defun aoc-parse-operator (packet)
  (let ((length-id (seq-take packet 1))
        (body (seq-drop packet 1)))
    (if (equal length-id "0")
        (aoc-parse-operator-by-length body)
      (aoc-parse-operator-by-count body))))

(defun aoc-packet-version-sum (packet)
  (let ((subpackets (or (plist-get packet 'subpackets) '()))
        (version (or (plist-get packet 'version) 0)))
    (+ version (seq-reduce '+ (seq-map 'aoc-packet-version-sum subpackets) 0))))

(defun aoc-packet-value (packet)
  (let ((type-id (plist-get packet 'type-id)))
    (cond ((eq type-id 0) "+")
          ((eq type-id 1) "*")
          ((eq type-id 2) "min")
          ((eq type-id 3) "max")
          ((eq type-id 4) (plist-get packet 'value))
          ((eq type-id 5) "aoc-greater")
          ((eq type-id 6) "aoc-less")
          ((eq type-id 7) "aoc-eq"))))

(defun aoc-packet-to-exp (packet)
  (let ((subpackets (or (plist-get packet 'subpackets) '()))
        (val (aoc-packet-value packet)))
    (if (> (length subpackets) 0)
        (format "(%s %s)" val (seq-reduce 'concat (seq-map 'aoc-packet-to-exp subpackets) ""))
      (format " %s " val))))

(defun aoc-eval-packet (packet)
  (let ((exp (aoc-packet-to-exp packet)))
    (eval (car (read-from-string (format "(progn %s)" exp))))))

(defun aoc-sixteen-one ()
  (interactive)
  (let* ((hex (replace-regexp-in-string "\n" "" (thing-at-point 'line nil)))
         (bin (seq-reduce 'concat (seq-map 'aoc-get-bin hex) ""))
         (packet (aoc-parse-packet bin)))
    (message "%d" (aoc-packet-version-sum packet))))

(defun aoc-greater (v1 v2)
  (if (> v1 v2) 1 0))

(defun aoc-less (v1 v2)
  (if (< v1 v2) 1 0))

(defun aoc-eq (v1 v2)
  (if (eq v1 v2) 1 0))

(defun aoc-sixteen-two ()
  (interactive)
  (let* ((hex (replace-regexp-in-string "\n" "" (thing-at-point 'line nil)))
         (bin (seq-reduce 'concat (seq-map 'aoc-get-bin hex) ""))
         (packet (aoc-parse-packet bin)))
    (message "%s" (aoc-eval-packet packet))))
