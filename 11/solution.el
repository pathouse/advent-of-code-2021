(defun aoc-parse-row (line)
  (seq-into
   (seq-map
    'string-to-number
    (seq-filter
     (lambda (c) (and (not (equal c "")) (not (equal c "\n"))))
     (split-string line "")))
   'vector))

(defun aoc-parse-octopus-grid ()
  (beginning-of-buffer)
  (let ((grid '()))
    (while (not (eobp))
      (let ((row (aoc-parse-row (thing-at-point 'line nil))))
        (setq grid (cons row grid)))
      (forward-line 1))
    (seq-into (seq-reverse grid) 'vector)))

(defun aoc-all-grid-coords (grid)
  (let ((coords '()))
    (seq-do-indexed
     (lambda (row r-idx)
       (seq-do-indexed
        (lambda (_col c-idx)
          (setq coords (cons (vector r-idx c-idx) coords)))
        row))
     grid)
    coords))

(defun aoc-increase-energy (grid coords already-flashed)
  (let ((flashing '()))
    (seq-do
     (lambda (c)
       (if (and (not (seq-contains-p already-flashed c 'equal))
                (not (seq-contains-p flashing c 'equal)))
           (let* ((r-idx (aref c 0))
                  (c-idx (aref c 1))
                  (old-val (aref (aref grid r-idx) c-idx))
                  (new-val (+ 1 old-val)))
             (if (> new-val 9)
                 (progn
                   (aset (aref grid r-idx) c-idx 0)
                   (setq flashing (cons c flashing)))
               (aset (aref grid r-idx) c-idx new-val)))))
     coords)
    flashing))

(defun aoc-neighbors (grid row-idx col-idx)
  (seq-filter
   (lambda (loc)
     (and (>= (aref loc 0) 0)
          (>= (aref loc 1) 0)
          (< (aref loc 0) (length grid))
          (< (aref loc 1) (length (aref grid 0)))))
   (list
    (vector (- row-idx 1) (- col-idx 1))
    (vector (- row-idx 1) col-idx)
    (vector (- row-idx 1) (+ col-idx 1))
    (vector row-idx (- col-idx 1))
    (vector row-idx (+ col-idx 1))
    (vector (+ row-idx 1) (- col-idx 1))
    (vector (+ row-idx 1) col-idx)
    (vector (+ row-idx 1) (+ col-idx 1)))))

(defun aoc-print-grid (grid title)
  (newline)
  (insert (propertize title 'face 'bold))
  (newline)
  (seq-do
   (lambda (row)
     (beginning-of-line)
     (seq-do
      (lambda (col)
        (cond ((eq col 0)
               (insert (propertize (number-to-string col) 'face '(:foreground "#65FF46"))))
              ((eq col 9)
               (insert (propertize (number-to-string col) 'face '(:foreground "#FF4646"))))
               (t (insert (number-to-string col)))))
      row)
     (newline))
   grid)
  (newline))

(defun aoc-collect-neighbors (grid coords)
  (seq-mapcat
   (lambda (c) (aoc-neighbors grid (aref c 0) (aref c 1)))
   coords))

(defun aoc-eleven-one ()
  (interactive)
  (let ((grid (aoc-parse-octopus-grid))
        (flashes '())
        (buf (get-buffer-create "aoc-day-eleven")))
    (select-window (split-window-vertically))
    (switch-to-buffer buf)
    (erase-buffer)
    (aoc-print-grid grid "Initial State")
    (dotimes (n 100)
      (let* ((step-flashes) '()
             (next-flashes (aoc-increase-energy grid (aoc-all-grid-coords grid) step-flashes))
             (neighbors (aoc-collect-neighbors grid next-flashes)))
        (while (not (eq (length next-flashes) 0))
          (setq step-flashes (append next-flashes step-flashes))
          (setq next-flashes (aoc-increase-energy grid neighbors step-flashes))
          (setq neighbors (aoc-collect-neighbors grid next-flashes)))
        (aoc-print-grid grid (format "Step %d" (+ 1 n)))
        (setq flashes (cons step-flashes flashes))))
    (message "%d" (seq-reduce (lambda (acc step) (+ acc (length step))) flashes 0))))


(defun aoc-eleven-two ()
  (interactive)
  (let ((grid (aoc-parse-octopus-grid))
        (step 1)
        (all-flashing nil))
    (while (not all-flashing)
      (let* ((step-flashes) '()
             (next-flashes (aoc-increase-energy grid (aoc-all-grid-coords grid) step-flashes))
             (neighbors (aoc-collect-neighbors grid next-flashes)))
        (while (not (eq (length next-flashes) 0))
          (setq step-flashes (append next-flashes step-flashes))
          (setq next-flashes (aoc-increase-energy grid neighbors step-flashes))
          (setq neighbors (aoc-collect-neighbors grid next-flashes)))
        (if (eq (length step-flashes) (length (aoc-all-grid-coords grid)))
            (progn
              (setq all-flashing t)
              (message "%d" step))
          (setq step (+ 1 step)))))))
